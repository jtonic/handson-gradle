group 'ro.jtonic.handson'
version '0.1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.jetbrains.kotlin.plugin.noarg'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin-noarg'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformGradlePluginVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPlugin"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    compile "org.springframework.boot:spring-boot-starter-aop"

    testCompile "junit:junit:$junitVersion"
    testRuntime "org.junit.vintage:junit-vintage-engine:$junitVintageVersion"

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testCompile "io.kotlintest:kotlintest:$kotlinTest"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion

    // To use Log4J's LogManager
    testRuntime "org.apache.logging.log4j:log4j-core:$log4jVersion"
    testRuntime "org.apache.logging.log4j:log4j-jul:$log4jVersion"

    testCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
    compile group: 'com.jayway.restassured', name: 'json-schema-validator', version: restAssuredVersion
}

noArg {
    annotation("ro.jtonic.handson.gradle.model.Dto")
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

junitPlatform {
    // platformVersion '1.0.1'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
//        tags {
//            include 'fast'
//            exclude 'slow'
//        }
        // includeClassNamePattern '.*Test'
    }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

test {
    reports {
        html.enabled = true
        junitPlatformTest.enabled = true
        junitXml.enabled = false
    }
}

mainClassName = "ro.jtonic.handson.gradle.App"

task printVersions {
    description = 'Printing version numbers'
    group = "monitoring"

    doFirst {
        println("Project version: $version")
    }

    doLast {
        println("Junit version: $junitVersion")
    }
}

printVersions.doFirst {
    println("Added action to printVersion.doFirst")
}
printVersions.doLast {
    println("Added action to printVersion.doLast")
    logger.quiet("Project version: $version")
}

compileTestKotlin {
    println("=" * 80)
    println("Kotlin tests have been successfully compiled")
    println("=" * 80)
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
     distributionType =  Wrapper.DistributionType.ALL
     distributionUrl = distributionUrl.replace("https", "http")
    // distributionUrl =  https://myEnterpriseRepository:7070/gradle/distributions/gradle-2.3-bin.zip
}

task afterPrintVersions {
    logger.quiet("This depends on the task printlnVersions")
}

afterPrintVersions.dependsOn('printVersions')

task cleanUpResources {
    logger.quiet("=" * 80)
    logger.quiet("Cleaning up resources")
    logger.quiet("=" * 80)
}

test.finalizedBy cleanUpResources