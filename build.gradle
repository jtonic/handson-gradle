import org.ajoberstar.gradle.git.release.opinion.Strategies
import ro.jtonic.gradle.tasks.GreetingPlugin
import ro.jtonic.gradle.tasks.InfoTask
import ro.jtonic.handson.gradle.tasks.JavaDetailsTask

group = 'ro.jtonic.handson'
version = '0.1.0-SNAPSHOT'
description = 'Gradle project for learning'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.jetbrains.kotlin.plugin.noarg'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin-noarg'
apply plugin: 'nebula.release'
apply plugin: 'maven-publish'

apply from: 'gradle/plugins.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/tasks.gradle'
apply plugin: GreetingPlugin
apply plugin: 'details'

buildscript {
    repositories {
        maven {
            url = 'file:../lib'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPlugin"
        classpath "com.netflix.nebula:nebula-release-plugin:$nebulaReleasePlugin"
        classpath "ro.jtonic.handson:handson-gradle-plugins:0.1.0-SNAPSHOT"
    }
}

mainClassName = "ro.jtonic.handson.gradle.App"

details {
    prefix = 'All details'
}

greeting.name = "Liviu Pazargic"

noArg {
    annotation("ro.jtonic.handson.gradle.model.Dto")
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

test {
    reports {
        html.enabled = true
        junitXml.enabled = false
    }
}

task printVersions {
    description = 'Printing version numbers'
    group = "tony"

    println "This is task $name configuration phase"

    doFirst {
        println("Project version: $version")
    }

    doLast {
        println("Junit version: $junitVersion")
    }
}

printVersions.doFirst {
    println("Added action to printVersion.doFirst")
}
printVersions.doLast {
    println("Added action to printVersion.doLast")
    logger.quiet("Project version: $version")
}

compileTestKotlin {
    println("=" * 80)
    println("Kotlin tests have been successfully compiled")
    println("=" * 80)
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = distributionUrl.replace("https", "http")
}

task afterPrintVersions {
    logger.quiet("This depends on the task printlnVersions")

    doLast {
        logger.quiet "This will be executed after the ${printVersions.name}"
    }
}

afterPrintVersions.dependsOn printVersions

task printVersions(overwrite: true) {
    doFirst {
        logger.quiet "This will be executed instead of printVersions"
    }
}

task cleanUpResources {
    logger.quiet("=" * 80)
    logger.quiet("Cleaning up resources")
    logger.quiet("=" * 80)
}

test.finalizedBy cleanUpResources

// exercises
task zipTask(type: Zip) {
    group = "tony"
    from "$projectDir/.idea"
    destinationDir = file("$projectDir/destination")
    archiveName = 'myzip.zip'
    includes = ['modules.xml']
}

task info(type: InfoTask) {
    group = "tony"
    prefix = "Gradle current version:"
    output = file("$project.rootProject.buildDir/output.txt")
}

task 'java-details' (type: JavaDetailsTask) {
    prefix = 'Java details'
    group = 'tony'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "$buildDir/repo"
        }
    }
}

release {
    // Let the default versioning strategy be the maven style -SNAPSHOT, instead of nebula's devSnapshot
    defaultVersionStrategy = Strategies.SNAPSHOT
}

tasks.release.finalizedBy tasks.publish
